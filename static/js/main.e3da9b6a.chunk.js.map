{"version":3,"sources":["Event.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Event","this","props","data","name","desc","date","Component","base","Airtable","apiKey","App","getEvents","a","events","select","maxRecords","view","eachPage","records","fetchNextPage","setState","recordsToEventData","err","console","log","state","forEach","record","get","push","type","image","diversity","length","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAQMA,E,4JACF,WACI,OACI,gCACI,6BAAKC,KAAKC,MAAMC,KAAKC,OACrB,8BAAIH,KAAKC,MAAMC,KAAKE,KAApB,IAA0B,+BAAOJ,KAAKC,MAAMC,KAAKG,iB,GAL7CC,aAWLP,ICdTQ,EAAO,IAAIC,IAAS,CAAEC,OAAQ,sBAAsBF,KAAK,qBAwEhDG,E,kDAhEb,WAAYT,GAAa,IAAD,8BACtB,cAAMA,IAURU,UAXwB,sBAWZ,4BAAAC,EAAA,sDACNC,EAAsB,GAC1BN,EAAK,UAAUO,OAAO,CACpBC,WAAY,EACZC,KAAM,cACLC,UAAS,SAACC,EAASC,GAEpB,EAAKC,SAAS,CAACP,OAAQ,EAAKQ,mBAAmBH,KAC/CC,OACC,SAAcG,GACXA,GACFC,QAAQC,IAAIF,MAIhBC,QAAQC,IAAIX,GACZ,EAAKO,SAAS,CAACP,OAAQA,IAhBb,2CATV,EAAKY,MAAQ,CACXZ,OAAQ,IAHY,E,qDAOxB,WACEb,KAAKW,c,gCAsBP,SAAmBO,GACjB,IAAIL,EAAsB,GAY1B,OAXAK,EAAQQ,SAAQ,SAASC,GACvBJ,QAAQC,IAAI,YAAaG,EAAOC,IAAI,eACpCf,EAAOgB,KAAK,CACV1B,KAAMwB,EAAOC,IAAI,cACjBE,KAAMH,EAAOC,IAAI,cACjBxB,KAAMuB,EAAOC,IAAI,eACjBG,MAAOJ,EAAOC,IAAI,SAClBvB,KAAMsB,EAAOC,IAAI,QACjBI,UAAWL,EAAOC,IAAI,kBAGnBf,I,oBAGT,WACE,IAAIA,EAAwB,GAC5BU,QAAQC,IAAI,aACZD,QAAQC,IAAIxB,KAAKyB,MAAMZ,OAAOoB,QAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIlC,KAAKyB,MAAMZ,OAAOoB,OAAQC,IAC5CrB,EAAOgB,KACL,cAAC,EAAD,CAAO3B,KAAMF,KAAKyB,MAAMZ,OAAOqB,IAASA,IAG5C,OACE,gCACE,2CACCrB,S,GA5DSP,aCGH6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e3da9b6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport EventData from './EventData';\r\n\r\ninterface EventProps {\r\n    data: EventData;\r\n}\r\n\r\n// class used to render an event tile\r\nclass Event extends Component<EventProps, {}> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.data.name}</h1>\r\n                <p>{this.props.data.desc} <span>{this.props.data.date}</span></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Event;","import React, { Component } from 'react';\nimport Airtable from 'airtable';\nimport EventData from './EventData';\nimport Event from './Event';\nimport { isThisTypeNode } from 'typescript';\nconst base = new Airtable({ apiKey: 'keynmrOvRll58ERY7'}).base('appRTSRlXjQ67gLwM');\n\ninterface AppState {\n  events: EventData[];\n}\n\nclass App extends Component<{}, AppState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      events: []\n    };\n  }\n\n  componentDidMount() {\n    this.getEvents();\n  }\n\n  getEvents = async () => {\n    let events: EventData[] = [];\n    base('Events').select({\n      maxRecords: 3,\n      view: \"Grid view\"\n    }).eachPage((records, fetchNextPage) => {\n      // this function is called for each page of records\n      this.setState({events: this.recordsToEventData(records)});\n      fetchNextPage(); // fetch the next one!\n    }, function done(err) {\n      if (err) { \n        console.log(err);\n        return;\n      }\n    });\n    console.log(events);\n    this.setState({events: events});\n  }\n\n  recordsToEventData(records: any): EventData[] {\n    let events: EventData[] = [];\n    records.forEach(function(record: any) {\n      console.log('Retrieved', record.get('Event Name'));\n      events.push({\n        name: record.get('Event Name'),\n        type: record.get('Event Type'),\n        desc: record.get('Description'),\n        image: record.get('Image'),\n        date: record.get('Date'),\n        diversity: record.get('Diversity'),\n      });\n    });\n    return events;\n  }\n\n  render() {\n    let events: JSX.Element[] = [];\n    console.log('made list');\n    console.log(this.state.events.length)\n    for (let i = 0; i < this.state.events.length; i++) {\n      events.push(\n        <Event data={this.state.events[i]} key={i}/>\n      );\n    }\n    return (\n      <div>\n        <h1>VIRTUALSO</h1>\n        {events}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}